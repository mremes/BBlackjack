/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Main;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import logiikka.*;
import logiikka.cards.*;
import logiikka.elements.*;
import logiikka.utilities.*;

/**
 *
 * @author mrremes
 */
public class gui extends javax.swing.JFrame {

    private Kierros kierros;
    private Pelaaja pelaaja;

    /**
     * Creates new form gui
     */
    public gui() {
        this.pelaaja = new Pelaaja(1000);
        this.kierros = new Kierros(pelaaja);
        initComponents();
        Jakaja jakaja = new Jakaja();
        Jakaja.sekoitaKortit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        hit = new javax.swing.JButton();
        stand = new javax.swing.JButton();
        dble = new javax.swing.JButton();
        split = new javax.swing.JButton();
        betsize = new javax.swing.JSlider();
        deal = new javax.swing.JButton();
        exit = new javax.swing.JButton();
        mainCards = new javax.swing.JPanel();
        dealerCards = new javax.swing.JPanel();
        info = new javax.swing.JLabel();
        mainScore = new javax.swing.JLabel();
        dealerScore = new javax.swing.JLabel();
        balance = new javax.swing.JLabel();
        split1Cards = new javax.swing.JPanel();
        split2Cards = new javax.swing.JPanel();
        split1Score = new javax.swing.JLabel();
        split2Score = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Better Blackjack");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        hit.setText("HIT");
        hit.setEnabled(false);
        hit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hitActionPerformed(evt);
            }
        });
        getContentPane().add(hit, new org.netbeans.lib.awtextra.AbsoluteConstraints(319, 356, 99, -1));

        stand.setText("STAND");
        stand.setEnabled(false);
        stand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                standActionPerformed(evt);
            }
        });
        getContentPane().add(stand, new org.netbeans.lib.awtextra.AbsoluteConstraints(319, 392, 99, -1));

        dble.setText("DOUBLE");
        dble.setEnabled(false);
        dble.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dbleActionPerformed(evt);
            }
        });
        getContentPane().add(dble, new org.netbeans.lib.awtextra.AbsoluteConstraints(424, 356, 99, -1));

        split.setText("SPLIT");
        split.setToolTipText("");
        split.setEnabled(false);
        split.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                splitActionPerformed(evt);
            }
        });
        getContentPane().add(split, new org.netbeans.lib.awtextra.AbsoluteConstraints(424, 392, 99, -1));

        betsize.setMajorTickSpacing(50);
        betsize.setMaximum(1000);
        betsize.setMinimum(50);
        betsize.setPaintTicks(true);
        betsize.setSnapToTicks(true);
        betsize.setToolTipText("");
        betsize.setCursor(new java.awt.Cursor(java.awt.Cursor.MOVE_CURSOR));
        betsize.setFocusable(false);
        betsize.setRequestFocusEnabled(false);
        betsize.setVerifyInputWhenFocusTarget(false);
        getContentPane().add(betsize, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 356, -1, 66));

        deal.setText("DEAL");
        deal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dealActionPerformed(evt);
            }
        });
        getContentPane().add(deal, new org.netbeans.lib.awtextra.AbsoluteConstraints(224, 356, 89, 60));

        exit.setText("EXIT");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        getContentPane().add(exit, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 360, 89, 60));

        mainCards.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, -40, 5));
        getContentPane().add(mainCards, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, 606, -1));

        dealerCards.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, -40, 5));
        getContentPane().add(dealerCards, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 12, 606, -1));

        info.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        info.setToolTipText("");
        getContentPane().add(info, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 320, 170, 30));

        mainScore.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(mainScore, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 310, 160, 20));

        dealerScore.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(dealerScore, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 120, 170, 20));

        balance.setText("Balance: 1000");
        getContentPane().add(balance, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 330, 140, 30));

        split1Cards.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, -40, 5));
        getContentPane().add(split1Cards, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, 250, -1));

        split2Cards.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, -40, 5));
        getContentPane().add(split2Cards, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 180, 220, -1));
        getContentPane().add(split1Score, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 290, 120, 10));
        getContentPane().add(split2Score, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 290, 120, 10));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void hitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hitActionPerformed
        kierros.hit(kierros.getPelaajanKasi());
        mainCards.add(new JLabel(new ImageIcon("cards/" + kierros.getVikaKortti().src())));
        naytaArvo();
        if (kierros.getPelaajanKasi().isBust()) {
            jakajanKasi();
            info.setText(kierros.getPelaajanKasi().getArvoS() + ", you're bust!");
            info.updateUI();
            defaultButtons();
        }

    }//GEN-LAST:event_hitActionPerformed

    private void dealActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dealActionPerformed
        alusta();
        Kasi k = kierros.getPelaajanKasi();
        Kasi j = kierros.getJakajanKasi();
        mainCards.add(new JLabel(new ImageIcon("cards/" + k.getKortti(0).src())));
        dealerCards.add(new JLabel(new ImageIcon("cards/back1.png")));
        mainCards.add(new JLabel(new ImageIcon("cards/" + k.getKortti(1).src())));
        dealerCards.add(new JLabel(new ImageIcon("cards/" + j.getKortti(1).src())));
        mainCards.updateUI();
        dealerCards.updateUI();
        deal.setEnabled(false);
        if (!k.isBlackjack()) {
            playButtons();
            naytaArvo();
            if (k.isSplittable()) {
                split.setEnabled(true);
            }
        } else if (k.isBlackjack()) {
            defaultButtons();
            jakajanKasi();
            naytaArvo();
            vertailu();
        }
    }//GEN-LAST:event_dealActionPerformed

    private void standActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_standActionPerformed
        Kasi pelaaja = kierros.getPelaajanKasi();
        kierros.stand(kierros.getPelaajanKasi());
        defaultButtons();
        jakajanKasi();
        vertailu();
    }//GEN-LAST:event_standActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitActionPerformed

    private void dbleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dbleActionPerformed
        kierros.doubl(kierros.getPelaajanKasi());
        mainCards.add(new JLabel(new ImageIcon("cards/" + kierros.getVikaKortti().src())));
        naytaArvo();
        jakajanKasi();
        updateBalance();
        vertailu();
        defaultButtons();
    }//GEN-LAST:event_dbleActionPerformed

    private void splitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_splitActionPerformed
        kierros.split(kierros.getPelaajanKasi());
        mainCards.setVisible(false);
        mainScore.setVisible(false);
        Kasi k1 = kierros.getPelaajanKadet().get(0);
        Kasi k2 = kierros.getPelaajanKadet().get(1);
        split1Cards.add(new JLabel(new ImageIcon("cards/" + k1.getKortti(0).src())));
        split1Cards.add(new JLabel(new ImageIcon("cards/" + k1.getKortti(1).src())));
        split2Cards.add(new JLabel(new ImageIcon("cards/" + k2.getKortti(0).src())));
        split2Cards.add(new JLabel(new ImageIcon("cards/" + k2.getKortti(1).src())));
        split1Score.setText(k1.getArvoS());
        split2Score.setText(k2.getArvoS());
        split1Cards.updateUI();
        split2Cards.updateUI();
    }//GEN-LAST:event_splitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new gui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel balance;
    private javax.swing.JSlider betsize;
    private javax.swing.JButton dble;
    private javax.swing.JButton deal;
    private javax.swing.JPanel dealerCards;
    private javax.swing.JLabel dealerScore;
    private javax.swing.JButton exit;
    private javax.swing.JButton hit;
    private javax.swing.JLabel info;
    private javax.swing.JPanel mainCards;
    private javax.swing.JLabel mainScore;
    private javax.swing.JButton split;
    private javax.swing.JPanel split1Cards;
    private javax.swing.JLabel split1Score;
    private javax.swing.JPanel split2Cards;
    private javax.swing.JLabel split2Score;
    private javax.swing.JButton stand;
    // End of variables declaration//GEN-END:variables

    private void naytaArvo() {
        mainScore.setText(kierros.getPelaajanKasi().getArvoS());
        mainScore.updateUI();
    }

    private void alusta() {
        kierros = new Kierros(pelaaja);
        kierros.jaaKadet();
        kierros.setPanos((int) betsize.getValue());
        updateBalance();
        betsize.setValue(50);
        balance.updateUI();
        mainCards.removeAll();
        dealerCards.removeAll();
        mainCards.updateUI();
        dealerCards.updateUI();
        info.setText("");
        mainScore.setText("");
        dealerScore.setText("");
        info.updateUI();
        mainScore.updateUI();
        dealerScore.updateUI();
    }

    private void defaultButtons() {
        hit.setEnabled(false);
        stand.setEnabled(false);
        dble.setEnabled(false);
        exit.setEnabled(true);
        deal.setEnabled(true);
    }

    private void playButtons() {
        hit.setEnabled(true);
        stand.setEnabled(true);
        dble.setEnabled(true);
        exit.setEnabled(false);
    }
    
    private void vertailu() {
        Kasi pelaaja = kierros.getPelaajanKasi();
        int compare = pelaaja.compareTo(kierros.getJakajanKasi());
        switch (compare) {
            case 2:
                blackjack();
                break;
            case 1:
                voitto();
                break;
            case 0:
                tasuri();
                break;
            case -1:
                havio();
                break;
            default:
                break;
        }
    }
    
    private void blackjack() {
        int bjVoitto = kierros.getPanos() * 2 + kierros.getPanos()/2;
        asetaTeksti("BLACKJACK, you win!");
        pelaaja.lisaaRahaa(bjVoitto);
        updateBalance();
    }

    private void voitto() {
        int normiVoitto = kierros.getPanos() * 2;
        asetaTeksti("You win.");
        pelaaja.lisaaRahaa(normiVoitto);
        updateBalance();

    }

    private void havio() {
        asetaTeksti("You lose.");
    }

    private void tasuri() {
        asetaTeksti("Push.");
        pelaaja.lisaaRahaa(kierros.getPanos());
        updateBalance();
    }

    private void asetaTeksti(String teksti) {
        info.setText(teksti);
        info.updateUI();
    }

    public void jakajanKasi() {
        ArrayList<Kasi> pelaajanKadet = kierros.getPelaajanKadet();
        Kasi jakajanKasi = kierros.getJakajanKasi();
        jakajanKasi.setOpen();
        if (KierrosUtil.dealerOttaa(pelaajanKadet)) {
            while (jakajanKasi.getArvo() < 17 && !KierrosUtil.pelaajaAllBj(pelaajanKadet)) {
                jakajanKasi.addKortti(Jakaja.annaKortti());
            }
        }
        dealerCards.removeAll();
        for (int i = 0; i < jakajanKasi.getKortit().size(); i++) {
            dealerCards.add(new JLabel(new ImageIcon("cards/" + jakajanKasi.getKortti(i).src())));
        }
        dealerCards.updateUI();
        dealerScore.setText(jakajanKasi.getArvoS());
        dealerScore.updateUI();
    }

    public void updateBalance() {
        balance.setText("Balance: " + pelaaja.getBalance());
        betsize.setValue(50);
    }
}
