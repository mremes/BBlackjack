/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Main;

import BasicStrategy.Strategy;
import BasicStrategy.Action;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import logiikka.*;
import logiikka.cards.*;
import logiikka.elements.*;
import logiikka.utilities.*;
import sun.audio.*;

/**
 *
 * @author mrremes
 */
public class gui extends javax.swing.JFrame {

    private Kierros kierros;
    private Pelaaja pelaaja;
    private HashMap<Kasi, JLabel> scoreBox;
    private Sound aani;
    private Strategy strategy;

    /**
     * Creates new form gui
     */
    public gui() {
        this.pelaaja = new Pelaaja(1000);
        this.kierros = new Kierros(pelaaja);
        this.scoreBox = new HashMap();
        initComponents();
        Jakaja jakaja = new Jakaja();
        Jakaja.sekoitaKortit();
        focusSplit1.setVisible(false);
        focusSplit2.setVisible(false);
        this.aani = new Sound();
        if(!mutebg.isSelected()) {
            aani.bgsound.playLooped();
        }
        this.strategy = new Strategy();

    }

    /**
     * file:/home/ad/fshome4/u4/ This method is called from within the
     * constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        hit = new javax.swing.JButton();
        stand = new javax.swing.JButton();
        dble = new javax.swing.JButton();
        split = new javax.swing.JButton();
        betsize = new javax.swing.JSlider();
        deal = new javax.swing.JButton();
        exit = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        mainCards = new javax.swing.JPanel();
        dealerCards = new javax.swing.JPanel();
        deposit = new javax.swing.JButton();
        mainScore = new javax.swing.JLabel();
        dealerScore = new javax.swing.JLabel();
        balance = new javax.swing.JLabel();
        split1Cards = new javax.swing.JPanel();
        split2Cards = new javax.swing.JPanel();
        split1Score = new javax.swing.JLabel();
        split2Score = new javax.swing.JLabel();
        focusSplit1 = new javax.swing.JLabel();
        focusSplit2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        rememberbet = new javax.swing.JCheckBox();
        advice = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        mutebg = new javax.swing.JCheckBox();
        muteplay = new javax.swing.JCheckBox();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Better Blackjack");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMaximumSize(new java.awt.Dimension(630, 430));
        setMinimumSize(new java.awt.Dimension(630, 430));
        setPreferredSize(new java.awt.Dimension(630, 430));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jInternalFrame1.setFocusCycleRoot(false);
        jInternalFrame1.setRequestFocusEnabled(false);
        jInternalFrame1.setVisible(false);
        jInternalFrame1.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setText("Amount:");
        jInternalFrame1.getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 240, 30));
        jInternalFrame1.getContentPane().add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 10, 100, -1));

        jButton2.setText("OK");
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jInternalFrame1.getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 10, -1, -1));

        getContentPane().add(jInternalFrame1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 170, 250, 80));
        jInternalFrame1.setClosable(true);

        hit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/hit.png")));
        hit.setBorderPainted(false);
        hit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        hit.setEnabled(false);
        hit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hitActionPerformed(evt);
            }
        });
        getContentPane().add(hit, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 360, 99, -1));
        hit.setBorderPainted(false);
        hit.setContentAreaFilled(false);
        hit.setFocusPainted(false);
        hit.setOpaque(false);

        stand.setIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/stand.png")));
        stand.setBorderPainted(false);
        stand.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        stand.setEnabled(false);
        stand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                standActionPerformed(evt);
            }
        });
        getContentPane().add(stand, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 390, 99, -1));
        stand.setBorderPainted(false);
        stand.setContentAreaFilled(false);
        stand.setFocusPainted(false);
        stand.setOpaque(false);

        dble.setIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/double.png")));
        dble.setBorderPainted(false);
        dble.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        dble.setEnabled(false);
        dble.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dbleActionPerformed(evt);
            }
        });
        getContentPane().add(dble, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 360, 99, -1));
        dble.setBorderPainted(false);
        dble.setContentAreaFilled(false);
        dble.setFocusPainted(false);
        dble.setOpaque(false);

        split.setIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/split.png")));
        split.setToolTipText("");
        split.setBorderPainted(false);
        split.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        split.setEnabled(false);
        split.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                splitActionPerformed(evt);
            }
        });
        getContentPane().add(split, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 390, 99, -1));
        split.setBorderPainted(false);
        split.setContentAreaFilled(false);
        split.setFocusPainted(false);
        split.setOpaque(false);

        betsize.setFont(new java.awt.Font("Ubuntu", 0, 10)); // NOI18N
        betsize.setForeground(java.awt.Color.white);
        betsize.setMajorTickSpacing(50);
        betsize.setMaximum(500);
        betsize.setMinimum(50);
        betsize.setPaintLabels(true);
        betsize.setPaintTicks(true);
        betsize.setSnapToTicks(true);
        betsize.setToolTipText("");
        betsize.setCursor(new java.awt.Cursor(java.awt.Cursor.MOVE_CURSOR));
        betsize.setFocusable(false);
        betsize.setRequestFocusEnabled(false);
        betsize.setVerifyInputWhenFocusTarget(false);
        getContentPane().add(betsize, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 356, -1, 66));
        betsize.setForeground(Color.WHITE);
        betsize.setPaintTicks(true);
        betsize.setPaintLabels(true);
        betsize.setPaintTrack(true);

        deal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/deal.png")));
        deal.setBorderPainted(false);
        deal.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        deal.setDefaultCapable(false);
        deal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dealActionPerformed(evt);
            }
        });
        getContentPane().add(deal, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 360, 90, 60));
        deal.setBorderPainted(false);
        deal.setContentAreaFilled(false);
        deal.setFocusPainted(false);
        deal.setOpaque(false);

        exit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/exit.png")));
        exit.setBorderPainted(false);
        exit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        getContentPane().add(exit, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 360, 89, 60));
        exit.setBorderPainted(false);
        exit.setContentAreaFilled(false);
        exit.setFocusPainted(false);
        exit.setOpaque(false);

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Game options");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 10, -1, -1));

        mainCards.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, -50, 5));
        getContentPane().add(mainCards, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, 606, -1));
        mainCards.setOpaque(false);

        dealerCards.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, -50, 5));
        getContentPane().add(dealerCards, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 12, 606, -1));
        dealerCards.setOpaque(false);

        deposit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/deposit.png")));
        deposit.setBorderPainted(false);
        deposit.setContentAreaFilled(false);
        deposit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        deposit.setFocusPainted(false);
        deposit.setInheritsPopupMenu(true);
        deposit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                depositActionPerformed(evt);
            }
        });
        getContentPane().add(deposit, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 35, -1, -1));

        mainScore.setFont(new java.awt.Font("Droid Sans Fallback", 1, 15)); // NOI18N
        mainScore.setForeground(new java.awt.Color(255, 255, 255));
        mainScore.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(mainScore, new org.netbeans.lib.awtextra.AbsoluteConstraints(234, 335, 160, 20));

        dealerScore.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        dealerScore.setForeground(new java.awt.Color(255, 255, 255));
        dealerScore.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(dealerScore, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 120, 170, 20));

        balance.setFont(new java.awt.Font("Lucida Grande", 3, 14)); // NOI18N
        balance.setForeground(new java.awt.Color(255, 255, 255));
        balance.setText("Balance: 1000");
        getContentPane().add(balance, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 140, 30));

        split1Cards.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, -50, 5));
        getContentPane().add(split1Cards, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, 250, -1));
        split1Cards.setOpaque(false);

        split2Cards.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, -50, 5));
        getContentPane().add(split2Cards, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 210, 220, -1));
        split2Cards.setOpaque(false);

        split1Score.setFont(new java.awt.Font("Droid Sans Fallback", 1, 15)); // NOI18N
        split1Score.setForeground(java.awt.Color.white);
        split1Score.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(split1Score, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 320, 120, 20));

        split2Score.setFont(new java.awt.Font("Droid Sans Fallback", 1, 15)); // NOI18N
        split2Score.setForeground(java.awt.Color.white);
        split2Score.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        getContentPane().add(split2Score, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 320, 120, 20));

        focusSplit1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/table/arrowdown.png")));
        getContentPane().add(focusSplit1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 170, 30, 40));

        focusSplit2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/table/arrowdown.png")));
        getContentPane().add(focusSplit2, new org.netbeans.lib.awtextra.AbsoluteConstraints(475, 170, 30, 40));

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel1.setForeground(java.awt.Color.white);
        jLabel1.setText("BET SIZE");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(147, 340, 70, 40));

        rememberbet.setForeground(java.awt.Color.white);
        rememberbet.setText("Remember bet size");
        rememberbet.setToolTipText("");
        rememberbet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rememberbetActionPerformed(evt);
            }
        });
        getContentPane().add(rememberbet, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 30, -1, -1));

        advice.setForeground(java.awt.Color.white);
        advice.setText("Strategy practice");
        getContentPane().add(advice, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 50, -1, -1));

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Sound options");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 70, -1, -1));

        mutebg.setForeground(java.awt.Color.white);
        mutebg.setText("Mute background");
        mutebg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mutebgActionPerformed(evt);
            }
        });
        getContentPane().add(mutebg, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 90, -1, -1));
        mutebg.setSelected(true);

        muteplay.setForeground(new java.awt.Color(255, 255, 255));
        muteplay.setText("Mute play sounds");
        muteplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                muteplayActionPerformed(evt);
            }
        });
        getContentPane().add(muteplay, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 110, -1, -1));

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/table/blackjack_background.png")));
        background.setPreferredSize(new java.awt.Dimension(640, 430));
        getContentPane().add(background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -10, 630, 450));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void hitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hitActionPerformed
        if (!kierros.splitattu()) {
            if (vinkki(kierros.getPelaajanKasi(), Action.HIT)) {
                split.setEnabled(false);
                aani.hit.play();
                kierros.hit(kierros.getPelaajanKasi());
                dble.setEnabled(false);
                mainCards.add(new JLabel(new ImageIcon(getClass().getResource("/cards/" + kierros.getVikaKortti(kierros.getPelaajanKasi()).src()))));
            }
        } else if (!kierros.getPelaajanKadet().get(0).isValmis()) {
            if (vinkki(kierros.getPelaajanKadet().get(0), Action.HIT)) {
                kierros.hit(kierros.getPelaajanKadet().get(0));
                dble.setEnabled(false);
                split1Cards.add(new JLabel(new ImageIcon(getClass().getResource("/cards/" + kierros.getVikaKortti(kierros.getPelaajanKadet().get(0)).src()))));
                if (kierros.getPelaajanKadet().get(0).isValmis()) {
                    focusSplit1.setVisible(false);
                    focusSplit2.setVisible(true);
                    dble.setEnabled(true);
                }
            }
        } else if (!kierros.getPelaajanKadet().get(1).isValmis()) {
            if (vinkki(kierros.getPelaajanKadet().get(1), Action.HIT)) {
                kierros.hit(kierros.getPelaajanKadet().get(1));
                dble.setEnabled(false);
                split2Cards.add(new JLabel(new ImageIcon(getClass().getResource("/cards/" + kierros.getVikaKortti(kierros.getPelaajanKadet().get(1)).src()))));
            }
        }
        naytaArvo();
        if (KierrosUtil.pelaajaValmis(kierros.getPelaajanKadet())) {
            focusSplit2.setVisible(false);
            jakajanKasi();
            vertailu();
            defaultButtons();
        }

    }//GEN-LAST:event_hitActionPerformed

    private void dealActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dealActionPerformed
        if (pelaaja.getBalance() - betsize.getValue() < 0) {
            jTextField1.setVisible(false);
            jLabel4.setText("Deposit more to continue.");
            jInternalFrame1.setVisible(true);
        } else {
            alusta();
            aani.deal.play();
            Kasi k = kierros.getPelaajanKasi();
            scoreBox.put(k, mainScore);
            Kasi j = kierros.getJakajanKasi();
            mainCards.add(new JLabel(new ImageIcon(getClass().getResource("/cards/" + k.getKortti(0).src()))));
            dealerCards.add(new JLabel(new ImageIcon(getClass().getResource("/cards/back1.png"))));
            mainCards.add(new JLabel(new ImageIcon(getClass().getResource("/cards/" + k.getKortti(1).src()))));
            dealerCards.add(new JLabel(new ImageIcon(getClass().getResource("/cards/" + j.getKortti(1).src()))));
            mainCards.updateUI();
            dealerCards.updateUI();
            deal.setEnabled(false);
            if (!k.isBlackjack()) {
                playButtons();
                naytaArvo();
                if (k.isSplittable()) {
                    split.setEnabled(true);
                }
            } else if (k.isBlackjack()) {
                defaultButtons();
                jakajanKasi();
                naytaArvo();
                vertailu();
            }
        }
    }//GEN-LAST:event_dealActionPerformed

    private void standActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_standActionPerformed
        if (!kierros.splitattu()) {
            if (vinkki(kierros.getPelaajanKasi(), Action.STAND)) {
                kierros.stand(kierros.getPelaajanKasi());
                focusSplit2.setVisible(false);
                defaultButtons();
                jakajanKasi();
                vertailu();
            }
        } else if (!kierros.getPelaajanKadet().get(0).isValmis()) {
            if (vinkki(kierros.getPelaajanKadet().get(0), Action.STAND)) {
                kierros.stand(kierros.getPelaajanKadet().get(0));
                if (kierros.getPelaajanKadet().get(0).isValmis()) {
                    focusSplit1.setVisible(false);
                    focusSplit2.setVisible(true);
                    dble.setEnabled(true);
                }
            }
        } else if (!kierros.getPelaajanKadet().get(1).isValmis()) {
            if (vinkki(kierros.getPelaajanKadet().get(1), Action.STAND)) {
                kierros.stand(kierros.getPelaajanKadet().get(1));
                focusSplit2.setVisible(false);
                defaultButtons();
                jakajanKasi();
                vertailu();
            }

        }

    }//GEN-LAST:event_standActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitActionPerformed

    private void dbleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dbleActionPerformed
        if (pelaaja.getBalance() - kierros.getPanos() < 0) {
            jTextField1.setVisible(false);
            jLabel4.setText("No money for this action.");
            jInternalFrame1.setVisible(true);
        } else {
            if (!kierros.splitattu()) {
                if (vinkki(kierros.getPelaajanKasi(), Action.DOUBLEH) || vinkki(kierros.getPelaajanKasi(), Action.DOUBLES)) {
                    kierros.doubl(kierros.getPelaajanKasi());
                    mainCards.add(new JLabel(new ImageIcon(getClass().getResource("/cards/" + kierros.getVikaKortti(kierros.getPelaajanKasi()).src()))));
                }
            } else if (!kierros.getPelaajanKadet().get(0).isValmis()) {
                if (vinkki(kierros.getPelaajanKadet().get(0), Action.DOUBLEH) || vinkki(kierros.getPelaajanKadet().get(0), Action.DOUBLES)) {
                    kierros.doubl(kierros.getPelaajanKadet().get(0));
                    split1Cards.add(new JLabel(new ImageIcon(getClass().getResource("/cards/" + kierros.getVikaKortti(kierros.getPelaajanKadet().get(0)).src()))));
                    split1Score.setText(kierros.getPelaajanKadet().get(0).getArvoS());
                    focusSplit1.setVisible(false);
                    focusSplit2.setVisible(true);
                }
            } else if (!kierros.getPelaajanKadet().get(1).isValmis()) {
                if (vinkki(kierros.getPelaajanKadet().get(1), Action.DOUBLEH) || vinkki(kierros.getPelaajanKadet().get(1), Action.DOUBLES)) {
                    kierros.doubl(kierros.getPelaajanKadet().get(1));
                    split2Cards.add(new JLabel(new ImageIcon(getClass().getResource("/cards/" + kierros.getVikaKortti(kierros.getPelaajanKadet().get(1)).src()))));
                }
            }
            if (KierrosUtil.pelaajaValmis(kierros.getPelaajanKadet())) {
                focusSplit2.setVisible(false);
                naytaArvo();
                jakajanKasi();
                updateBalance();
                vertailu();
                defaultButtons();
            }
            updateBalance();
        }
    }//GEN-LAST:event_dbleActionPerformed

    private void splitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_splitActionPerformed
        if (pelaaja.getBalance() - kierros.getPanos() < 0) {
            jTextField1.setVisible(false);
            jLabel4.setText("No money for this action.");
            jInternalFrame1.setVisible(true);
        } else {
            aani.split.play();
            kierros.split(kierros.getPelaajanKasi());
            split.setEnabled(false);
            split1Cards.setVisible(true);
            split2Cards.setVisible(true);
            split1Score.setVisible(true);
            split2Score.setVisible(true);
            mainCards.setVisible(false);
            mainScore.setVisible(false);
            Kasi k1 = kierros.getPelaajanKadet().get(0);
            Kasi k2 = kierros.getPelaajanKadet().get(1);
            scoreBox.put(k1, split1Score);
            scoreBox.put(k2, split2Score);
            split1Cards.add(new JLabel(new ImageIcon(getClass().getResource("/cards/" + k1.getKortti(0).src()))));
            split1Cards.add(new JLabel(new ImageIcon(getClass().getResource("/cards/" + k1.getKortti(1).src()))));
            split2Cards.add(new JLabel(new ImageIcon(getClass().getResource("/cards/" + k2.getKortti(0).src()))));
            split2Cards.add(new JLabel(new ImageIcon(getClass().getResource("/cards/" + k2.getKortti(1).src()))));
            split1Score.setText(k1.getArvoS());
            split2Score.setText(k2.getArvoS());
            split1Cards.updateUI();
            split2Cards.updateUI();
            focusSplit1.setVisible(true);
            updateBalance();

            if (KierrosUtil.pelaajaValmis(kierros.getPelaajanKadet())) {
                focusSplit1.setVisible(false);
                naytaArvo();
                jakajanKasi();
                updateBalance();
                vertailu();
                defaultButtons();
            }
        }
    }//GEN-LAST:event_splitActionPerformed

    private void rememberbetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rememberbetActionPerformed


    }//GEN-LAST:event_rememberbetActionPerformed

    private void mutebgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mutebgActionPerformed
        aani.bgsound.setMute();
        if (!mutebg.isSelected()) {
            aani.bgsound.unmute();
            aani.bgsound.playLooped();
        }
    }//GEN-LAST:event_mutebgActionPerformed

    private void muteplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_muteplayActionPerformed
        aani.hit.setMute();
        aani.deal.setMute();
        aani.split.setMute();
        aani.result.setMute();
        if (!muteplay.isSelected()) {
            aani.hit.unmute();
            aani.deal.unmute();
            aani.split.unmute();
            aani.result.unmute();
        }
    }//GEN-LAST:event_muteplayActionPerformed

    private void depositActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_depositActionPerformed
        jTextField1.setVisible(true);
        jButton2.setVisible(true);
        jLabel4.setText("Amount: ");
        jInternalFrame1.setVisible(true);
    }//GEN-LAST:event_depositActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (jLabel4.getText().equals("Amount: ")) {
            if (jTextField1.getText().matches("[0-9]+")) {
                pelaaja.lisaaRahaa(Integer.parseInt(jTextField1.getText()));
                jInternalFrame1.setVisible(false);
                updateBalance();
            } else {
                jTextField1.setText("");
                jInternalFrame1.setVisible(false);
            }
        } else {
            jInternalFrame1.setVisible(false);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(gui.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(gui.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(gui.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(gui.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new gui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox advice;
    private javax.swing.JLabel background;
    private javax.swing.JLabel balance;
    private javax.swing.JSlider betsize;
    private javax.swing.JButton dble;
    private javax.swing.JButton deal;
    private javax.swing.JPanel dealerCards;
    private javax.swing.JLabel dealerScore;
    private javax.swing.JButton deposit;
    private javax.swing.JButton exit;
    private javax.swing.JLabel focusSplit1;
    private javax.swing.JLabel focusSplit2;
    private javax.swing.JButton hit;
    private javax.swing.JButton jButton2;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JPanel mainCards;
    private javax.swing.JLabel mainScore;
    private javax.swing.JCheckBox mutebg;
    private javax.swing.JCheckBox muteplay;
    private javax.swing.JCheckBox rememberbet;
    private javax.swing.JButton split;
    private javax.swing.JPanel split1Cards;
    private javax.swing.JLabel split1Score;
    private javax.swing.JPanel split2Cards;
    private javax.swing.JLabel split2Score;
    private javax.swing.JButton stand;
    // End of variables declaration//GEN-END:variables

    private void naytaArvo() {
        mainScore.setText(kierros.getPelaajanKasi().getArvoS());
        mainScore.updateUI();
        if (kierros.splitattu()) {
            split1Cards.updateUI();
            split2Cards.updateUI();
            split1Score.setText(kierros.getPelaajanKadet().get(0).getArvoS());
            split2Score.setText(kierros.getPelaajanKadet().get(1).getArvoS());
        }
    }

    private void alusta() {
        mainCards.setVisible(true);
        mainScore.setVisible(true);
        split1Score.setVisible(false);
        split2Score.setVisible(false);
        split1Cards.setVisible((false));
        split2Cards.setVisible(false);
        split1Score.removeAll();
        split2Score.removeAll();
        split1Cards.removeAll();
        split2Cards.removeAll();

        kierros = new Kierros(pelaaja);
        kierros.jaaKadet();
        kierros.setPanos((int) betsize.getValue());
        updateBalance();
        if (rememberbet.isSelected()) {
            int value = betsize.getValue();
            betsize.setValue(value);

        } else {
            betsize.setValue(50);
        }
        balance.updateUI();
        mainCards.removeAll();
        dealerCards.removeAll();
        mainCards.updateUI();
        dealerCards.updateUI();
        mainScore.setText("");
        dealerScore.setText("");
        mainScore.updateUI();
        dealerScore.updateUI();
    }

    private void defaultButtons() {
        hit.setEnabled(false);
        stand.setEnabled(false);
        dble.setEnabled(false);
        exit.setEnabled(true);
        deal.setEnabled(true);
        split.setEnabled(false);
    }

    private void playButtons() {
        hit.setEnabled(true);
        stand.setEnabled(true);
        dble.setEnabled(true);
        exit.setEnabled(false);
    }

    private void vertailu() {
        aani.result.play();
        for (Kasi pelaaja : kierros.getPelaajanKadet()) {
            int compare = pelaaja.compareTo(kierros.getJakajanKasi());
            switch (compare) {
                case 2:
                    scoreBox.get(pelaaja).setText(blackjack());
                    break;
                case 1:
                    scoreBox.get(pelaaja).setText(voitto(pelaaja));
                    break;
                case 0:
                    scoreBox.get(pelaaja).setText(tasuri(pelaaja));
                    break;
                case -1:
                    scoreBox.get(pelaaja).setText(havio());
                    break;
                default:
                    break;
            }
        }
    }

    private String blackjack() {
        int bjVoitto = kierros.getPanos() * 2 + kierros.getPanos() / 2;
        pelaaja.lisaaRahaa(bjVoitto);
        updateBalance();
        return "BJ pays 3/2.";
    }

    private String voitto(Kasi k) {
        int normiVoitto = kierros.getPanos() * 2;
        if (k.isDoubled()) {
            normiVoitto *= 2;
        }
        pelaaja.lisaaRahaa(normiVoitto);
        updateBalance();
        return "You win.";
    }

    private String tasuri(Kasi k) {
        int palautus = kierros.getPanos();
        if (k.isDoubled()) {
            palautus *= 2;
        }
        pelaaja.lisaaRahaa(palautus);
        updateBalance();
        return "Push.";
    }

    private String havio() {
        return "You lose.";
    }

    public void jakajanKasi() {
        ArrayList<Kasi> pelaajanKadet = kierros.getPelaajanKadet();
        Kasi jakajanKasi = kierros.getJakajanKasi();
        jakajanKasi.setOpen();
        if (KierrosUtil.dealerOttaa(pelaajanKadet)) {
            while (jakajanKasi.getArvo() < 17 && !KierrosUtil.pelaajaAllBj(pelaajanKadet)) {
                jakajanKasi.addKortti(Jakaja.annaKortti());
            }
        }
        dealerCards.removeAll();
        for (int i = 0; i < jakajanKasi.getKortit().size(); i++) {
            dealerCards.add(new JLabel(new ImageIcon(getClass().getResource("/cards/" + jakajanKasi.getKortti(i).src()))));
        }

        dealerCards.updateUI();
        dealerScore.setText(jakajanKasi.getArvoS());
        dealerScore.updateUI();
    }

    public void updateBalance() {
        balance.setText("Balance: " + pelaaja.getBalance());
    }

    public boolean vinkki(Kasi k, Action toiminto) {
        Action vinkki = Strategy.get(k, kierros.getJakajanKasi());
        if (toiminto == Action.HIT && vinkki == Action.DOUBLEH && (k.getKortit().size() > 2 || kierros.getPanos() > pelaaja.getBalance())) {
            return true;
        } else if (toiminto == Action.STAND && vinkki == Action.DOUBLES && (k.getKortit().size() > 2 || kierros.getPanos() > pelaaja.getBalance())) {
            return true;
        }
        if (vinkki != toiminto && (vinkki == Action.DOUBLEH || vinkki == Action.DOUBLES) && advice.isSelected() && k.getKortit().size() > 2) {
            if (vinkki == Action.DOUBLEH) {
                jLabel4.setText("Advice: HIT");
                jTextField1.setVisible(false);
                jInternalFrame1.setVisible(true);
                return false;
            } else {
                jLabel4.setText("Advice: STAND");
                jTextField1.setVisible(false);
                jInternalFrame1.setVisible(true);
                return false;
            }
        } else if (vinkki != toiminto && advice.isSelected()) {
            jLabel4.setText("Advice: " + vinkki);
            jTextField1.setVisible(false);
            jInternalFrame1.setVisible(true);
            return false;
        }
        return true;
    }

}
